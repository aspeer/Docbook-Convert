#!/bin/perl
#
use strict qw(vars);
use lib qw(lib);
use vars qw($VERSION);



#  External modules
#
use IO::File;
use Getopt::Long;
Getopt::Long::Configure('no_ignore_case');
use Pod::Usage;
use FindBin qw($RealBin $Script);
use File::Find;
use Cwd qw(cwd);
use Docbook::Convert;
use Docbook::Convert::Constant;


#  Used for debugging only
#
use Data::Dumper;
$Data::Dumper::Indent=1;
$Data::Dumper::Terse=1;


#  Version Info, must be all one line for MakeMaker, CPAN.
#
$VERSION='0.001';


#  Run main routine
#
exit ${&main(&getopt(\@ARGV)) || die 'unknown error'};


#===================================================================================================

sub getopt {


    #  Parse options and dispatch to actual work routine below
    #
    my $argv_ar=shift();
    
    
    #  Get options
    #
    my %opt;
    
    
    #  Converts some constant settings into settable options
    #
    my @getopt_constant=map { $GETOPT_CONSTANT_HR->{$_} ? $_.$GETOPT_CONSTANT_HR->{$_} : $_ } 
        keys %{$GETOPT_CONSTANT_HR};


    #  Get command line options
    #
    GetOptions(
        \%opt,
        @{$GETOPT_AR},
        @getopt_constant,
    ) || pod2usage(2);
    pod2usage(-verbose => 99, -sections => 'Synopsis|Options', -exitval => 1) if $opt{'help'};
    pod2usage(-verbose => 2) if $opt{'man'};
    $opt{'version'} && do {
        print "$Script version: $VERSION\n";
        exit 0
    };
    

    #  And set any constants based on options supplied
    #
    foreach my $opt (keys %{$GETOPT_CONSTANT_HR}) {
        if (defined($opt{$opt})) {
            ${uc($opt)}=$opt{$opt};
        }
    }


    #  Get infile
    #
    unless (@{$opt{'infile'}}) {
        $opt{'infile'}=@{$argv_ar} ? $argv_ar : [\*STDIN];
    }


    #  Done
    #
    return \%opt;

}


sub main {

    #  Passed a list of options:
    #
    my $opt_hr=shift();
    $opt_hr->{'handler'} ||= $HANDLER_DEFAULT;
    foreach my $fn (@{$opt_hr->{'infile'}}) {
        my $output;
        if (ref($fn) eq 'GLOB') {
            $output=Docbook::Convert->process($fn, $opt_hr);
        }
        else {
            $output=Docbook::Convert->process_file($fn, $opt_hr);
        }
        if ($opt_hr->{'podmerge'}) {
            ($out_fn=$in_fn)=~s/\Q$XMLSUFFIX\E$//;
            unless (-f $out_fn) {
                return err ("can't merge into file '$out_fn', file does not exist");
            }
            Docbook::Convert::Pod::Util->_pod_replace($out_fn, \$output);
        }
    }
    return \undef;
    
}

